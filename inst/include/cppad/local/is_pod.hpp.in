# ifndef CPPAD_LOCAL_IS_POD_HPP
# define CPPAD_LOCAL_IS_POD_HPP
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-or-later
// SPDX-FileCopyrightText: Bradley M. Bell <bradbell@seanet.com>
// SPDX-FileContributor: 2003-22 Bradley M. Bell
// ----------------------------------------------------------------------------
// make sure size_t is defined because autotools version of
// is_pod_specialize_98 uses it
# include <cstddef>

/*!
\file is_pod.hpp
File that defines is_pod<Type>(void)
*/
namespace CppAD { namespace local { // BEGIN_CPPAD_LOCAL_NAMESPACE
/*!
Is this type plain old data; i.e., its constructor need not be called.

The default definition is false. This include file defines it as true
for all the fundamental types except for void and nullptr_t.
*/
template <class T> bool is_pod(void) { return false; }
// The following command suppresses doxygen processing for the code below
/// \cond
// C++98 Fundamental types
@is_pod_specialize_98@

// C++11 Fundamental types
@is_pod_specialize_11@

/// \endcond
} } // END_CPPAD_LOCAL_NAMESPACE

# endif
