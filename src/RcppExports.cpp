// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// aceDLNMbuild
List aceDLNMbuild(const Eigen::VectorXd R_y, const Eigen::MatrixXd R_B_inner, const Eigen::VectorXd R_knots_f, const Eigen::MatrixXd R_Sw_large, const Eigen::MatrixXd R_Sf, const Eigen::MatrixXd R_Dw, const Eigen::MatrixXd R_Xrand, const Eigen::MatrixXd R_Xfix, const Eigen::MatrixXd R_Zf, const Eigen::VectorXd R_Xoffset, const Eigen::VectorXd R_r, const Eigen::MatrixXd R_K, const Eigen::VectorXd R_a, Eigen::VectorXd R_alpha_f, Eigen::VectorXd R_phi, double R_log_theta, double R_log_smoothing_f, double R_log_smoothing_w, Eigen::VectorXd R_betaR, Eigen::VectorXd R_betaF, Eigen::VectorXd R_logsmoothing);
RcppExport SEXP _aceDLNMcppadBFGS_aceDLNMbuild(SEXP R_ySEXP, SEXP R_B_innerSEXP, SEXP R_knots_fSEXP, SEXP R_Sw_largeSEXP, SEXP R_SfSEXP, SEXP R_DwSEXP, SEXP R_XrandSEXP, SEXP R_XfixSEXP, SEXP R_ZfSEXP, SEXP R_XoffsetSEXP, SEXP R_rSEXP, SEXP R_KSEXP, SEXP R_aSEXP, SEXP R_alpha_fSEXP, SEXP R_phiSEXP, SEXP R_log_thetaSEXP, SEXP R_log_smoothing_fSEXP, SEXP R_log_smoothing_wSEXP, SEXP R_betaRSEXP, SEXP R_betaFSEXP, SEXP R_logsmoothingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type R_y(R_ySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_B_inner(R_B_innerSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type R_knots_f(R_knots_fSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_Sw_large(R_Sw_largeSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_Sf(R_SfSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_Dw(R_DwSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_Xrand(R_XrandSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_Xfix(R_XfixSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_Zf(R_ZfSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type R_Xoffset(R_XoffsetSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type R_r(R_rSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_K(R_KSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type R_a(R_aSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type R_alpha_f(R_alpha_fSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type R_phi(R_phiSEXP);
    Rcpp::traits::input_parameter< double >::type R_log_theta(R_log_thetaSEXP);
    Rcpp::traits::input_parameter< double >::type R_log_smoothing_f(R_log_smoothing_fSEXP);
    Rcpp::traits::input_parameter< double >::type R_log_smoothing_w(R_log_smoothing_wSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type R_betaR(R_betaRSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type R_betaF(R_betaFSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type R_logsmoothing(R_logsmoothingSEXP);
    rcpp_result_gen = Rcpp::wrap(aceDLNMbuild(R_y, R_B_inner, R_knots_f, R_Sw_large, R_Sf, R_Dw, R_Xrand, R_Xfix, R_Zf, R_Xoffset, R_r, R_K, R_a, R_alpha_f, R_phi, R_log_theta, R_log_smoothing_f, R_log_smoothing_w, R_betaR, R_betaF, R_logsmoothing));
    return rcpp_result_gen;
END_RCPP
}
// aceDLNMopt
List aceDLNMopt(SEXP ptr, SEXP ptrcppad, Eigen::VectorXd R_alpha_f, Eigen::VectorXd R_phi, double R_log_theta, double R_log_smoothing_f, double R_log_smoothing_w, Eigen::VectorXd R_betaR, Eigen::VectorXd R_betaF, Eigen::VectorXd R_logsmoothing, bool verbose);
RcppExport SEXP _aceDLNMcppadBFGS_aceDLNMopt(SEXP ptrSEXP, SEXP ptrcppadSEXP, SEXP R_alpha_fSEXP, SEXP R_phiSEXP, SEXP R_log_thetaSEXP, SEXP R_log_smoothing_fSEXP, SEXP R_log_smoothing_wSEXP, SEXP R_betaRSEXP, SEXP R_betaFSEXP, SEXP R_logsmoothingSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrcppad(ptrcppadSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type R_alpha_f(R_alpha_fSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type R_phi(R_phiSEXP);
    Rcpp::traits::input_parameter< double >::type R_log_theta(R_log_thetaSEXP);
    Rcpp::traits::input_parameter< double >::type R_log_smoothing_f(R_log_smoothing_fSEXP);
    Rcpp::traits::input_parameter< double >::type R_log_smoothing_w(R_log_smoothing_wSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type R_betaR(R_betaRSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type R_betaF(R_betaFSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type R_logsmoothing(R_logsmoothingSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(aceDLNMopt(ptr, ptrcppad, R_alpha_f, R_phi, R_log_theta, R_log_smoothing_f, R_log_smoothing_w, R_betaR, R_betaF, R_logsmoothing, verbose));
    return rcpp_result_gen;
END_RCPP
}
// aceDLNMCI
List aceDLNMCI(const Eigen::VectorXd R_y, const Eigen::MatrixXd R_B_inner, const Eigen::VectorXd R_knots_f, const Eigen::MatrixXd R_Sw_large, const Eigen::MatrixXd R_Sf, const Eigen::MatrixXd R_Dw, const Eigen::MatrixXd R_Xrand, const Eigen::MatrixXd R_Xfix, const Eigen::MatrixXd R_Zf, const Eigen::VectorXd R_Xoffset, const Eigen::VectorXd R_r, const Eigen::MatrixXd R_K, const Eigen::VectorXd R_a, Eigen::VectorXd R_alpha_f, Eigen::VectorXd R_phi, double R_log_theta, double R_log_smoothing_f, double R_log_smoothing_w, Eigen::VectorXd R_betaR, Eigen::VectorXd R_betaF, Eigen::VectorXd R_logsmoothing, const int Rci, const int rseed, bool ifeta, bool delta, bool verbose);
RcppExport SEXP _aceDLNMcppadBFGS_aceDLNMCI(SEXP R_ySEXP, SEXP R_B_innerSEXP, SEXP R_knots_fSEXP, SEXP R_Sw_largeSEXP, SEXP R_SfSEXP, SEXP R_DwSEXP, SEXP R_XrandSEXP, SEXP R_XfixSEXP, SEXP R_ZfSEXP, SEXP R_XoffsetSEXP, SEXP R_rSEXP, SEXP R_KSEXP, SEXP R_aSEXP, SEXP R_alpha_fSEXP, SEXP R_phiSEXP, SEXP R_log_thetaSEXP, SEXP R_log_smoothing_fSEXP, SEXP R_log_smoothing_wSEXP, SEXP R_betaRSEXP, SEXP R_betaFSEXP, SEXP R_logsmoothingSEXP, SEXP RciSEXP, SEXP rseedSEXP, SEXP ifetaSEXP, SEXP deltaSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type R_y(R_ySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_B_inner(R_B_innerSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type R_knots_f(R_knots_fSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_Sw_large(R_Sw_largeSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_Sf(R_SfSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_Dw(R_DwSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_Xrand(R_XrandSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_Xfix(R_XfixSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_Zf(R_ZfSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type R_Xoffset(R_XoffsetSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type R_r(R_rSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_K(R_KSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type R_a(R_aSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type R_alpha_f(R_alpha_fSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type R_phi(R_phiSEXP);
    Rcpp::traits::input_parameter< double >::type R_log_theta(R_log_thetaSEXP);
    Rcpp::traits::input_parameter< double >::type R_log_smoothing_f(R_log_smoothing_fSEXP);
    Rcpp::traits::input_parameter< double >::type R_log_smoothing_w(R_log_smoothing_wSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type R_betaR(R_betaRSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type R_betaF(R_betaFSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type R_logsmoothing(R_logsmoothingSEXP);
    Rcpp::traits::input_parameter< const int >::type Rci(RciSEXP);
    Rcpp::traits::input_parameter< const int >::type rseed(rseedSEXP);
    Rcpp::traits::input_parameter< bool >::type ifeta(ifetaSEXP);
    Rcpp::traits::input_parameter< bool >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(aceDLNMCI(R_y, R_B_inner, R_knots_f, R_Sw_large, R_Sf, R_Dw, R_Xrand, R_Xfix, R_Zf, R_Xoffset, R_r, R_K, R_a, R_alpha_f, R_phi, R_log_theta, R_log_smoothing_f, R_log_smoothing_w, R_betaR, R_betaF, R_logsmoothing, Rci, rseed, ifeta, delta, verbose));
    return rcpp_result_gen;
END_RCPP
}
// ConditionalAIC
List ConditionalAIC(const Eigen::VectorXd R_y, const Eigen::MatrixXd R_B_inner, const Eigen::VectorXd R_knots_f, const Eigen::MatrixXd R_Sw_large, const Eigen::MatrixXd R_Sf, const Eigen::MatrixXd R_Dw, const Eigen::MatrixXd R_Xrand, const Eigen::MatrixXd R_Xfix, const Eigen::MatrixXd R_Zf, const Eigen::VectorXd R_Xoffset, const Eigen::VectorXd R_r, const Eigen::MatrixXd R_K, const Eigen::VectorXd R_a, Eigen::VectorXd R_alpha_f, Eigen::VectorXd R_phi, double R_log_theta, double R_log_smoothing_f, double R_log_smoothing_w, Eigen::VectorXd R_betaR, Eigen::VectorXd R_betaF, Eigen::VectorXd R_logsmoothing);
RcppExport SEXP _aceDLNMcppadBFGS_ConditionalAIC(SEXP R_ySEXP, SEXP R_B_innerSEXP, SEXP R_knots_fSEXP, SEXP R_Sw_largeSEXP, SEXP R_SfSEXP, SEXP R_DwSEXP, SEXP R_XrandSEXP, SEXP R_XfixSEXP, SEXP R_ZfSEXP, SEXP R_XoffsetSEXP, SEXP R_rSEXP, SEXP R_KSEXP, SEXP R_aSEXP, SEXP R_alpha_fSEXP, SEXP R_phiSEXP, SEXP R_log_thetaSEXP, SEXP R_log_smoothing_fSEXP, SEXP R_log_smoothing_wSEXP, SEXP R_betaRSEXP, SEXP R_betaFSEXP, SEXP R_logsmoothingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type R_y(R_ySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_B_inner(R_B_innerSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type R_knots_f(R_knots_fSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_Sw_large(R_Sw_largeSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_Sf(R_SfSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_Dw(R_DwSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_Xrand(R_XrandSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_Xfix(R_XfixSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_Zf(R_ZfSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type R_Xoffset(R_XoffsetSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type R_r(R_rSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_K(R_KSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type R_a(R_aSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type R_alpha_f(R_alpha_fSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type R_phi(R_phiSEXP);
    Rcpp::traits::input_parameter< double >::type R_log_theta(R_log_thetaSEXP);
    Rcpp::traits::input_parameter< double >::type R_log_smoothing_f(R_log_smoothing_fSEXP);
    Rcpp::traits::input_parameter< double >::type R_log_smoothing_w(R_log_smoothing_wSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type R_betaR(R_betaRSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type R_betaF(R_betaFSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type R_logsmoothing(R_logsmoothingSEXP);
    rcpp_result_gen = Rcpp::wrap(ConditionalAIC(R_y, R_B_inner, R_knots_f, R_Sw_large, R_Sf, R_Dw, R_Xrand, R_Xfix, R_Zf, R_Xoffset, R_r, R_K, R_a, R_alpha_f, R_phi, R_log_theta, R_log_smoothing_f, R_log_smoothing_w, R_betaR, R_betaF, R_logsmoothing));
    return rcpp_result_gen;
END_RCPP
}
// aceDLNMopt_nosmooth
List aceDLNMopt_nosmooth(const Eigen::VectorXd R_y, const Eigen::MatrixXd R_B_inner, const Eigen::VectorXd R_knots_f, const Eigen::MatrixXd R_Sw, const Eigen::MatrixXd R_Sf, const Eigen::MatrixXd R_Dw, const Eigen::MatrixXd R_Xfix, const Eigen::MatrixXd R_Zf, const Eigen::VectorXd R_Xoffset, Eigen::VectorXd R_alpha_f, Eigen::VectorXd R_phi, double R_log_theta, double R_log_smoothing_f, double R_log_smoothing_w, Eigen::VectorXd R_betaF, bool verbose);
RcppExport SEXP _aceDLNMcppadBFGS_aceDLNMopt_nosmooth(SEXP R_ySEXP, SEXP R_B_innerSEXP, SEXP R_knots_fSEXP, SEXP R_SwSEXP, SEXP R_SfSEXP, SEXP R_DwSEXP, SEXP R_XfixSEXP, SEXP R_ZfSEXP, SEXP R_XoffsetSEXP, SEXP R_alpha_fSEXP, SEXP R_phiSEXP, SEXP R_log_thetaSEXP, SEXP R_log_smoothing_fSEXP, SEXP R_log_smoothing_wSEXP, SEXP R_betaFSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type R_y(R_ySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_B_inner(R_B_innerSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type R_knots_f(R_knots_fSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_Sw(R_SwSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_Sf(R_SfSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_Dw(R_DwSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_Xfix(R_XfixSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_Zf(R_ZfSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type R_Xoffset(R_XoffsetSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type R_alpha_f(R_alpha_fSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type R_phi(R_phiSEXP);
    Rcpp::traits::input_parameter< double >::type R_log_theta(R_log_thetaSEXP);
    Rcpp::traits::input_parameter< double >::type R_log_smoothing_f(R_log_smoothing_fSEXP);
    Rcpp::traits::input_parameter< double >::type R_log_smoothing_w(R_log_smoothing_wSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type R_betaF(R_betaFSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(aceDLNMopt_nosmooth(R_y, R_B_inner, R_knots_f, R_Sw, R_Sf, R_Dw, R_Xfix, R_Zf, R_Xoffset, R_alpha_f, R_phi, R_log_theta, R_log_smoothing_f, R_log_smoothing_w, R_betaF, verbose));
    return rcpp_result_gen;
END_RCPP
}
// aceDLNMCI_nosmooth
List aceDLNMCI_nosmooth(const Eigen::VectorXd R_y, const Eigen::MatrixXd R_B_inner, const Eigen::VectorXd R_knots_f, const Eigen::MatrixXd R_Sw, const Eigen::MatrixXd R_Sf, const Eigen::MatrixXd R_Dw, const Eigen::MatrixXd R_Xfix, const Eigen::MatrixXd R_Zf, const Eigen::VectorXd R_Xoffset, Eigen::VectorXd R_alpha_f, Eigen::VectorXd R_phi, double R_log_theta, double R_log_smoothing_f, double R_log_smoothing_w, Eigen::VectorXd R_betaF, const int Rci, const int rseed, bool ifeta, bool delta, bool verbose);
RcppExport SEXP _aceDLNMcppadBFGS_aceDLNMCI_nosmooth(SEXP R_ySEXP, SEXP R_B_innerSEXP, SEXP R_knots_fSEXP, SEXP R_SwSEXP, SEXP R_SfSEXP, SEXP R_DwSEXP, SEXP R_XfixSEXP, SEXP R_ZfSEXP, SEXP R_XoffsetSEXP, SEXP R_alpha_fSEXP, SEXP R_phiSEXP, SEXP R_log_thetaSEXP, SEXP R_log_smoothing_fSEXP, SEXP R_log_smoothing_wSEXP, SEXP R_betaFSEXP, SEXP RciSEXP, SEXP rseedSEXP, SEXP ifetaSEXP, SEXP deltaSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type R_y(R_ySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_B_inner(R_B_innerSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type R_knots_f(R_knots_fSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_Sw(R_SwSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_Sf(R_SfSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_Dw(R_DwSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_Xfix(R_XfixSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_Zf(R_ZfSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type R_Xoffset(R_XoffsetSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type R_alpha_f(R_alpha_fSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type R_phi(R_phiSEXP);
    Rcpp::traits::input_parameter< double >::type R_log_theta(R_log_thetaSEXP);
    Rcpp::traits::input_parameter< double >::type R_log_smoothing_f(R_log_smoothing_fSEXP);
    Rcpp::traits::input_parameter< double >::type R_log_smoothing_w(R_log_smoothing_wSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type R_betaF(R_betaFSEXP);
    Rcpp::traits::input_parameter< const int >::type Rci(RciSEXP);
    Rcpp::traits::input_parameter< const int >::type rseed(rseedSEXP);
    Rcpp::traits::input_parameter< bool >::type ifeta(ifetaSEXP);
    Rcpp::traits::input_parameter< bool >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(aceDLNMCI_nosmooth(R_y, R_B_inner, R_knots_f, R_Sw, R_Sf, R_Dw, R_Xfix, R_Zf, R_Xoffset, R_alpha_f, R_phi, R_log_theta, R_log_smoothing_f, R_log_smoothing_w, R_betaF, Rci, rseed, ifeta, delta, verbose));
    return rcpp_result_gen;
END_RCPP
}
// ConditionalAIC_nosmooth
List ConditionalAIC_nosmooth(const Eigen::VectorXd R_y, const Eigen::MatrixXd R_B_inner, const Eigen::VectorXd R_knots_f, const Eigen::MatrixXd R_Sw, const Eigen::MatrixXd R_Sf, const Eigen::MatrixXd R_Dw, const Eigen::MatrixXd R_Xfix, const Eigen::MatrixXd R_Zf, const Eigen::VectorXd R_Xoffset, Eigen::VectorXd R_alpha_f, Eigen::VectorXd R_phi, double R_log_theta, double R_log_smoothing_f, double R_log_smoothing_w, Eigen::VectorXd R_betaF);
RcppExport SEXP _aceDLNMcppadBFGS_ConditionalAIC_nosmooth(SEXP R_ySEXP, SEXP R_B_innerSEXP, SEXP R_knots_fSEXP, SEXP R_SwSEXP, SEXP R_SfSEXP, SEXP R_DwSEXP, SEXP R_XfixSEXP, SEXP R_ZfSEXP, SEXP R_XoffsetSEXP, SEXP R_alpha_fSEXP, SEXP R_phiSEXP, SEXP R_log_thetaSEXP, SEXP R_log_smoothing_fSEXP, SEXP R_log_smoothing_wSEXP, SEXP R_betaFSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type R_y(R_ySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_B_inner(R_B_innerSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type R_knots_f(R_knots_fSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_Sw(R_SwSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_Sf(R_SfSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_Dw(R_DwSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_Xfix(R_XfixSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R_Zf(R_ZfSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type R_Xoffset(R_XoffsetSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type R_alpha_f(R_alpha_fSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type R_phi(R_phiSEXP);
    Rcpp::traits::input_parameter< double >::type R_log_theta(R_log_thetaSEXP);
    Rcpp::traits::input_parameter< double >::type R_log_smoothing_f(R_log_smoothing_fSEXP);
    Rcpp::traits::input_parameter< double >::type R_log_smoothing_w(R_log_smoothing_wSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type R_betaF(R_betaFSEXP);
    rcpp_result_gen = Rcpp::wrap(ConditionalAIC_nosmooth(R_y, R_B_inner, R_knots_f, R_Sw, R_Sf, R_Dw, R_Xfix, R_Zf, R_Xoffset, R_alpha_f, R_phi, R_log_theta, R_log_smoothing_f, R_log_smoothing_w, R_betaF));
    return rcpp_result_gen;
END_RCPP
}
// knotindex
int knotindex(double x, Eigen::VectorXd t);
RcppExport SEXP _aceDLNMcppadBFGS_knotindex(SEXP xSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(knotindex(x, t));
    return rcpp_result_gen;
END_RCPP
}
// Bspline
double Bspline(double x, int j, Eigen::VectorXd t, int p);
RcppExport SEXP _aceDLNMcppadBFGS_Bspline(SEXP xSEXP, SEXP jSEXP, SEXP tSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(Bspline(x, j, t, p));
    return rcpp_result_gen;
END_RCPP
}
// Bsplinevec
Eigen::VectorXd Bsplinevec(double x, Eigen::VectorXd t, int p);
RcppExport SEXP _aceDLNMcppadBFGS_Bsplinevec(SEXP xSEXP, SEXP tSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(Bsplinevec(x, t, p));
    return rcpp_result_gen;
END_RCPP
}
// BsplinevecCon
Eigen::VectorXd BsplinevecCon(double x, Eigen::VectorXd t, int p, Eigen::MatrixXd Z);
RcppExport SEXP _aceDLNMcppadBFGS_BsplinevecCon(SEXP xSEXP, SEXP tSEXP, SEXP pSEXP, SEXP ZSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Z(ZSEXP);
    rcpp_result_gen = Rcpp::wrap(BsplinevecCon(x, t, p, Z));
    return rcpp_result_gen;
END_RCPP
}
// BsplinevecConJ
double BsplinevecConJ(double x, Eigen::VectorXd t, int p, Eigen::MatrixXd Z, int j);
RcppExport SEXP _aceDLNMcppadBFGS_BsplinevecConJ(SEXP xSEXP, SEXP tSEXP, SEXP pSEXP, SEXP ZSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(BsplinevecConJ(x, t, p, Z, j));
    return rcpp_result_gen;
END_RCPP
}
// Bsplinevec2
Eigen::VectorXd Bsplinevec2(double x, Eigen::VectorXd t, int p);
RcppExport SEXP _aceDLNMcppadBFGS_Bsplinevec2(SEXP xSEXP, SEXP tSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(Bsplinevec2(x, t, p));
    return rcpp_result_gen;
END_RCPP
}
// Bsplinevec2Con
Eigen::VectorXd Bsplinevec2Con(double x, Eigen::VectorXd t, int p, Eigen::MatrixXd Z);
RcppExport SEXP _aceDLNMcppadBFGS_Bsplinevec2Con(SEXP xSEXP, SEXP tSEXP, SEXP pSEXP, SEXP ZSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Z(ZSEXP);
    rcpp_result_gen = Rcpp::wrap(Bsplinevec2Con(x, t, p, Z));
    return rcpp_result_gen;
END_RCPP
}
// Bsplinevec2ConJ
double Bsplinevec2ConJ(double x, Eigen::VectorXd t, int p, Eigen::MatrixXd Z, int j);
RcppExport SEXP _aceDLNMcppadBFGS_Bsplinevec2ConJ(SEXP xSEXP, SEXP tSEXP, SEXP pSEXP, SEXP ZSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(Bsplinevec2ConJ(x, t, p, Z, j));
    return rcpp_result_gen;
END_RCPP
}
// BsplinevecFill
void BsplinevecFill(double x, Eigen::VectorXd t, int p, int col, Eigen::SparseMatrix<double>& Gx);
RcppExport SEXP _aceDLNMcppadBFGS_BsplinevecFill(SEXP xSEXP, SEXP tSEXP, SEXP pSEXP, SEXP colSEXP, SEXP GxSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type col(colSEXP);
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double>& >::type Gx(GxSEXP);
    BsplinevecFill(x, t, p, col, Gx);
    return R_NilValue;
END_RCPP
}
// Bsplinevec2Fill
void Bsplinevec2Fill(double x, Eigen::VectorXd t, int p, int col, Eigen::SparseMatrix<double>& Gx);
RcppExport SEXP _aceDLNMcppadBFGS_Bsplinevec2Fill(SEXP xSEXP, SEXP tSEXP, SEXP pSEXP, SEXP colSEXP, SEXP GxSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type col(colSEXP);
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double>& >::type Gx(GxSEXP);
    Bsplinevec2Fill(x, t, p, col, Gx);
    return R_NilValue;
END_RCPP
}
// Integral
List Integral(Eigen::VectorXd knots_x, Eigen::VectorXd knots_w, int kx, int kw, double maxL, Eigen::MatrixXd Zx, Eigen::MatrixXd Zw, Eigen::VectorXd t, Eigen::VectorXd alphax, bool OnlyAlphaxD);
RcppExport SEXP _aceDLNMcppadBFGS_Integral(SEXP knots_xSEXP, SEXP knots_wSEXP, SEXP kxSEXP, SEXP kwSEXP, SEXP maxLSEXP, SEXP ZxSEXP, SEXP ZwSEXP, SEXP tSEXP, SEXP alphaxSEXP, SEXP OnlyAlphaxDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type knots_x(knots_xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type knots_w(knots_wSEXP);
    Rcpp::traits::input_parameter< int >::type kx(kxSEXP);
    Rcpp::traits::input_parameter< int >::type kw(kwSEXP);
    Rcpp::traits::input_parameter< double >::type maxL(maxLSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Zx(ZxSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Zw(ZwSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type t(tSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type alphax(alphaxSEXP);
    Rcpp::traits::input_parameter< bool >::type OnlyAlphaxD(OnlyAlphaxDSEXP);
    rcpp_result_gen = Rcpp::wrap(Integral(knots_x, knots_w, kx, kw, maxL, Zx, Zw, t, alphax, OnlyAlphaxD));
    return rcpp_result_gen;
END_RCPP
}
// deBoor
double deBoor(double x, Eigen::VectorXd t, Eigen::VectorXd beta, int p);
RcppExport SEXP _aceDLNMcppadBFGS_deBoor(SEXP xSEXP, SEXP tSEXP, SEXP betaSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type t(tSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(deBoor(x, t, beta, p));
    return rcpp_result_gen;
END_RCPP
}
// Integral_interpolate
List Integral_interpolate(Eigen::VectorXd knots_x, Eigen::VectorXd knots_w, int kx, int kw, double maxL, Eigen::MatrixXd Zw, Eigen::VectorXd t, Eigen::VectorXd alphax, bool OnlyAlphaxD);
RcppExport SEXP _aceDLNMcppadBFGS_Integral_interpolate(SEXP knots_xSEXP, SEXP knots_wSEXP, SEXP kxSEXP, SEXP kwSEXP, SEXP maxLSEXP, SEXP ZwSEXP, SEXP tSEXP, SEXP alphaxSEXP, SEXP OnlyAlphaxDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type knots_x(knots_xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type knots_w(knots_wSEXP);
    Rcpp::traits::input_parameter< int >::type kx(kxSEXP);
    Rcpp::traits::input_parameter< int >::type kw(kwSEXP);
    Rcpp::traits::input_parameter< double >::type maxL(maxLSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Zw(ZwSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type t(tSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type alphax(alphaxSEXP);
    Rcpp::traits::input_parameter< bool >::type OnlyAlphaxD(OnlyAlphaxDSEXP);
    rcpp_result_gen = Rcpp::wrap(Integral_interpolate(knots_x, knots_w, kx, kw, maxL, Zw, t, alphax, OnlyAlphaxD));
    return rcpp_result_gen;
END_RCPP
}
// Interpolate
Eigen::VectorXd Interpolate(Eigen::SparseMatrix<double> X, Eigen::VectorXd y);
RcppExport SEXP _aceDLNMcppadBFGS_Interpolate(SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(Interpolate(X, y));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_aceDLNMcppadBFGS_aceDLNMbuild", (DL_FUNC) &_aceDLNMcppadBFGS_aceDLNMbuild, 21},
    {"_aceDLNMcppadBFGS_aceDLNMopt", (DL_FUNC) &_aceDLNMcppadBFGS_aceDLNMopt, 11},
    {"_aceDLNMcppadBFGS_aceDLNMCI", (DL_FUNC) &_aceDLNMcppadBFGS_aceDLNMCI, 26},
    {"_aceDLNMcppadBFGS_ConditionalAIC", (DL_FUNC) &_aceDLNMcppadBFGS_ConditionalAIC, 21},
    {"_aceDLNMcppadBFGS_aceDLNMopt_nosmooth", (DL_FUNC) &_aceDLNMcppadBFGS_aceDLNMopt_nosmooth, 16},
    {"_aceDLNMcppadBFGS_aceDLNMCI_nosmooth", (DL_FUNC) &_aceDLNMcppadBFGS_aceDLNMCI_nosmooth, 20},
    {"_aceDLNMcppadBFGS_ConditionalAIC_nosmooth", (DL_FUNC) &_aceDLNMcppadBFGS_ConditionalAIC_nosmooth, 15},
    {"_aceDLNMcppadBFGS_knotindex", (DL_FUNC) &_aceDLNMcppadBFGS_knotindex, 2},
    {"_aceDLNMcppadBFGS_Bspline", (DL_FUNC) &_aceDLNMcppadBFGS_Bspline, 4},
    {"_aceDLNMcppadBFGS_Bsplinevec", (DL_FUNC) &_aceDLNMcppadBFGS_Bsplinevec, 3},
    {"_aceDLNMcppadBFGS_BsplinevecCon", (DL_FUNC) &_aceDLNMcppadBFGS_BsplinevecCon, 4},
    {"_aceDLNMcppadBFGS_BsplinevecConJ", (DL_FUNC) &_aceDLNMcppadBFGS_BsplinevecConJ, 5},
    {"_aceDLNMcppadBFGS_Bsplinevec2", (DL_FUNC) &_aceDLNMcppadBFGS_Bsplinevec2, 3},
    {"_aceDLNMcppadBFGS_Bsplinevec2Con", (DL_FUNC) &_aceDLNMcppadBFGS_Bsplinevec2Con, 4},
    {"_aceDLNMcppadBFGS_Bsplinevec2ConJ", (DL_FUNC) &_aceDLNMcppadBFGS_Bsplinevec2ConJ, 5},
    {"_aceDLNMcppadBFGS_BsplinevecFill", (DL_FUNC) &_aceDLNMcppadBFGS_BsplinevecFill, 5},
    {"_aceDLNMcppadBFGS_Bsplinevec2Fill", (DL_FUNC) &_aceDLNMcppadBFGS_Bsplinevec2Fill, 5},
    {"_aceDLNMcppadBFGS_Integral", (DL_FUNC) &_aceDLNMcppadBFGS_Integral, 10},
    {"_aceDLNMcppadBFGS_deBoor", (DL_FUNC) &_aceDLNMcppadBFGS_deBoor, 4},
    {"_aceDLNMcppadBFGS_Integral_interpolate", (DL_FUNC) &_aceDLNMcppadBFGS_Integral_interpolate, 9},
    {"_aceDLNMcppadBFGS_Interpolate", (DL_FUNC) &_aceDLNMcppadBFGS_Interpolate, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_aceDLNMcppadBFGS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
