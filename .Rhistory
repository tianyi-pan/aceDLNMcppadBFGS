## START example for random effect
library(aceDLNMcppadBFGS)
# library(aceDLNM)
library(mgcv)
maxL <- 14
theta <- 8
Nt <- 1000
gt <- function(x) sin(x/150)
ttmp <- 1:1014
ttmp <- ttmp[-(1:maxL)]
meangt <- mean(gt(ttmp))
otherterm1 <- data.frame(trend = gt(ttmp) - meangt,
intercept = 0)
otherterm2 <- data.frame(trend = gt(ttmp) - meangt,
intercept = 1)
dat.gen1 <- GenerateData(fEtype = "quadratic", wltype = "type1",
Nt = Nt,
theta = theta,
maxL = maxL,
interpolate = TRUE,
other = otherterm1)
dat.gen2 <- GenerateData(fEtype = "quadratic", wltype = "type1",
Nt = Nt,
theta = theta,
maxL = maxL,
interpolate = TRUE,
other = otherterm2)
dat <- data.frame(x = c(dat.gen1$x, dat.gen2$x),
t = c(dat.gen1$t, dat.gen2$t),
y = c(dat.gen1$y, 2*dat.gen2$y),
id = as.factor(c(rep("a", 1014), rep("b", 1014))),
logpop = log(c(rep(1000, 1014), rep(2000, 1014))))
results <- aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
true.function <- dat.gen1$true.f
true.function$smooth <- function(x,var){
if(var == "t") gt(x) - meangt
}
summary(results, plot = TRUE, true.function = true.function)
?aceDLNM
dat.gen1 <- GenerateData(fEtype = "quadratic", wltype = "type1",
Nt = Nt,
theta = theta,
maxL = maxL,
interpolate = TRUE,
other = otherterm1)
dat.gen2 <- GenerateData(fEtype = "quadratic", wltype = "type1",
Nt = Nt,
theta = theta,
maxL = maxL,
interpolate = TRUE,
other = otherterm2)
dat <- data.frame(x = c(dat.gen1$x, dat.gen2$x),
t = c(dat.gen1$t, dat.gen2$t),
y = c(dat.gen1$y, 2*dat.gen2$y),
id = as.factor(c(rep("a", 1014), rep("b", 1014))),
logpop = log(c(rep(1000, 1014), rep(2000, 1014))))
results <- aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
load("test.RData")
## START example for random effect
library(aceDLNMcppadBFGS)
library(mgcv)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
load("test.RData")
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
library(mgcv)
library(aceDLNMcppadBFGS)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
par.start = c(4,4,8,4,8),
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
par.start = c(4,4,8,4,8),
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
# par.start = c(4,4,8,4,8),
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
# par.start = c(4,4,8,4,8),
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
dat$y[15]
dat$y[14]
dat$y[1:100]
View(dat)
lgamma(3)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
# par.start = c(4,4,8,4,8),
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
# par.start = c(4,4,8,4,8),
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
lgamma(3)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
# par.start = c(4,4,8,4,8),
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
# par.start = c(4,4,8,4,8),
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
par.start = c(4,4,4,4,4),
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
par.start = c(4,4,4,4,4),
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
results <- aceDLNM::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
dat = dat,
par.start = c(4,4,4,4,4),
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
par.start = c(4,4,4,4,4),
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
par.start = c(4,4,4,4,4),
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
results$opt
true.function <- dat.gen1$true.f
true.function$smooth <- function(x,var){
if(var == "t") gt(x) - meangt
}
summary(results, plot = TRUE, true.function = true.function)
## START example for random effect
library(aceDLNMcppadBFGS)
library(mgcv)
maxL <- 14
theta <- 8
Nt <- 1000
gt <- function(x) sin(x/150)
ttmp <- 1:1014
ttmp <- ttmp[-(1:maxL)]
meangt <- mean(gt(ttmp))
otherterm1 <- data.frame(trend = gt(ttmp) - meangt,
intercept = 0)
otherterm2 <- data.frame(trend = gt(ttmp) - meangt,
intercept = 1)
dat.gen1 <- GenerateData(fEtype = "quadratic", wltype = "type1",
Nt = Nt,
theta = theta,
maxL = maxL,
interpolate = TRUE,
other = otherterm1)
dat.gen2 <- GenerateData(fEtype = "quadratic", wltype = "type1",
Nt = Nt,
theta = theta,
maxL = maxL,
interpolate = TRUE,
other = otherterm2)
dat <- data.frame(x = c(dat.gen1$x, dat.gen2$x),
t = c(dat.gen1$t, dat.gen2$t),
y = c(dat.gen1$y, 2*dat.gen2$y),
id = as.factor(c(rep("a", 1014), rep("b", 1014))),
logpop = log(c(rep(1000, 1014), rep(2000, 1014))))
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
par.start = c(4,4,4,4,4),
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
maxL <- 14
theta <- 8
Nt <- 2000
gt <- function(x) sin(x/150)
ttmp <- 1:1014
ttmp <- ttmp[-(1:maxL)]
meangt <- mean(gt(ttmp))
otherterm1 <- data.frame(trend = gt(ttmp) - meangt,
intercept = 0)
otherterm2 <- data.frame(trend = gt(ttmp) - meangt,
intercept = 1)
dat.gen1 <- GenerateData(fEtype = "quadratic", wltype = "type1",
Nt = Nt,
theta = theta,
maxL = maxL,
interpolate = TRUE,
other = otherterm1)
dat.gen2 <- GenerateData(fEtype = "quadratic", wltype = "type1",
Nt = Nt,
theta = theta,
maxL = maxL,
interpolate = TRUE,
other = otherterm2)
dat <- data.frame(x = c(dat.gen1$x, dat.gen2$x),
t = c(dat.gen1$t, dat.gen2$t),
y = c(dat.gen1$y, 2*dat.gen2$y),
id = as.factor(c(rep("a", 1014), rep("b", 1014))),
logpop = log(c(rep(1000, 1014), rep(2000, 1014))))
library(mgcv)
maxL <- 14
theta <- 8
Nt <- 2000
gt <- function(x) sin(x/150)
ttmp <- 1:(Nt+14)
ttmp <- ttmp[-(1:maxL)]
meangt <- mean(gt(ttmp))
otherterm1 <- data.frame(trend = gt(ttmp) - meangt,
intercept = 0)
otherterm2 <- data.frame(trend = gt(ttmp) - meangt,
intercept = 1)
dat.gen1 <- GenerateData(fEtype = "quadratic", wltype = "type1",
Nt = Nt,
theta = theta,
maxL = maxL,
interpolate = TRUE,
other = otherterm1)
dat.gen2 <- GenerateData(fEtype = "quadratic", wltype = "type1",
Nt = Nt,
theta = theta,
maxL = maxL,
interpolate = TRUE,
other = otherterm2)
dat <- data.frame(x = c(dat.gen1$x, dat.gen2$x),
t = c(dat.gen1$t, dat.gen2$t),
y = c(dat.gen1$y, 2*dat.gen2$y),
id = as.factor(c(rep("a", Nt+14), rep("b",  Nt+14))),
logpop = log(c(rep(1000,  Nt+14), rep(2000,  Nt+14))))
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
true.function <- dat.gen1$true.f
true.function$smooth <- function(x,var){
if(var == "t") gt(x) - meangt
}
summary(results, plot = TRUE, true.function = true.function)
Nt <- 3000
dat.gen <- GenerateData(fEtype = fEtype, wltype = "type1",
Nt = Nt,
theta = theta,
maxL = maxL,
fE.set = function(x) 3*sin(x/20),
interpolate = TRUE)
dat <- data.frame(x = dat.gen$x,
t = dat.gen$t,
y = dat.gen$y)
mean(dat$y)
gt <- function(x) sin(x/150)
curve(gt, 1, 6573)
# gt <- function(x) 0.2*sin(x/150)
maxL <- 14
theta <- 8
Nt <- 3000
wltype <- "type1"
fEtype <- "quadratic"
set.seed(as.numeric(2))
ttmp <- 1:(2*maxL+Nt+100)
ttmp <- ttmp[-(1:maxL)]
meangt <- mean(gt(ttmp))
otherterm <- data.frame(trend = gt(ttmp) - meangt,
intercept = 0)
dat.gen.DLNM <- GenerateData(fEtype = fEtype, wltype = wltype,
Nt = Nt+100+maxL,
theta = theta,
maxL = maxL,
other = otherterm,
interpolate = TRUE)
x <- dat.gen.DLNM$x # PM2.5
t <- dat.gen.DLNM$t # time
## all data
dat.DLNM.all <- data.frame(x = dat.gen.DLNM$x,
t = dat.gen.DLNM$t,
y = dat.gen.DLNM$y)
## data for test
dat.DLNM.test <- dat.DLNM.all[-c(1:(Nt+maxL)), ]
dat.DLNM.test <- subset(dat.DLNM.test, select = -c(y)) # delete outcome variable for testing
## data for train
dat.DLNM <- dat.DLNM.all[1:(Nt+maxL),]
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x),
smooth = ~s(t, bs = "bs", k = 20),
dat = dat.DLNM,
pc = NULL,
kw = 20,
kE = 20,
maxL = maxL,
eta = FALSE,
verbose = TRUE)
true.function <- dat.gen.DLNM$true.f
true.function$smooth <- function(x,var){
if(var == "t") gt(x) - meangt
}
summary(results, plot = TRUE, true.function = true.function)
summary(results, plot = TRUE, true.function = true.function)
95873.71/60
95873.71/(60*60)
