results$data$Zw0
results$data$E.max
results$data$E.min
results$data$B_inner
dim(results$data$B_inner)
Dw
phi.opt <- rep(0, kw-2)
kw
phi_long <- as.vector(c(1, phi.opt))
Dw <- results$data$Dw
alpha_w.opt <- phi_long / as.numeric(sqrt(t(phi_long) %*% Dw %*% phi_long))
alpha_w.opt
phi_long
alpha_w <- alpha_w.opt
object <- results
kw <- object$data$kw
kE <- object$data$kE
Ufpen <- object$data$Ufpen
Uwpen <- object$data$Uwpen
Zwnew <- object$data$Zw %*% Uwpen
l.eval <- seq(0, object$data$maxL+1, length.out = max(object$data$maxL+1, 500))
alpha_w
wl.fit <- function(lnew) c(1, Bsplinevec2Con(lnew, object$data$knots_w, 4, Zwnew)) %*% object$data$Zw0 %*% alpha_w
wl.fit <- Vectorize(wl.fit)
wl.mode <- c(wl.fit(l.eval))
Bsplinevec2Con <- aceDLNMcppadBFGS:::Bsplinevec2Con
wl.mode <- c(wl.fit(l.eval))
plot(l.eval, wl.mode, "l")
phi.opt <- rep(1, kw-2)
phi_long <- as.vector(c(1, phi.opt))
alpha_w.opt <- phi_long / as.numeric(sqrt(t(phi_long) %*% Dw %*% phi_long))
alpha_w <- alpha_w.opt
wl.mode <- c(wl.fit(l.eval))
phi.opt <- rep(1, kw-2)
plot(l.eval, wl.mode, "l")
wlc <- function(l) dnorm(l,8,10)^2
wl_de <- sqrt(integrate(wlc, lower = 0, upper = maxLreal)$value)
maxLreal
wl <- function(l) dnorm(l,8,10)/wl_de
curve(wl, 0, 15)
wlc <- function(l) (1/(1+exp(l-8)))^2
wl_de <- sqrt(integrate(wlc, lower = 0, upper = maxLreal)$value)
wl <- function(l) 1/(1+exp(l-8))/wl_de
curve(wl, 0, 15)
wlc <- function(l) (1/(1+exp(l-1)))^2
wl_de <- sqrt(integrate(wlc, lower = 0, upper = maxLreal)$value)
wl <- function(l) 1/(1+exp(l-1))/wl_de
curve(wl, 0, 15)
wlc <- function(l) (1/(1+exp(l-2)))^2
wl_de <- sqrt(integrate(wlc, lower = 0, upper = maxLreal)$value)
wl <- function(l) 1/(1+exp(l-2))/wl_de
curve(wl, 0, 15)
wlc <- function(l) (1/(1+exp(l-15/5)))^2
wlc <- function(l) (1/(1+exp(l-8/5)))^2
wl_de <- sqrt(integrate(wlc, lower = 0, upper = 8)$value)
wl <- function(l) 1/(1+exp(l-8/5))/wl_de
curve(wl, 0, 15)
curve(wl, 0, 8)
## set starting values
## start with a wl
wlc <- function(l) (1/(1+exp(l-maxLreal/5)))^2
wl <- function(l) 1/(1+exp(l-maxLreal/5))/wl_de
wl_de <- sqrt(integrate(wlc, lower = 0, upper = maxLreal)$value)
plot(l.eval, wl.mode, "l")
phi.opt <- rep(2, kw-2)
phi_long <- as.vector(c(1, phi.opt))
alpha_w.opt <- phi_long / as.numeric(sqrt(t(phi_long) %*% Dw %*% phi_long))
alpha_w <- alpha_w.opt
wl.mode <- c(wl.fit(l.eval))
plot(l.eval, wl.mode, "l")
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x),
smooth = ~s(t, bs = "bs", k = 20),
dat = dat.DLNM,
pc = NULL,
kw = 20,
kE = 20,
maxL = maxL,
# maxL = 40,
# conL = FALSE,
conL = TRUE,
eta = FALSE,
verbose = TRUE)
aceDLNMcppadBFGS:::summary.aceDLNM_fit(results, plot = TRUE)
Bsplinevec2(lnew, object$data$knots_w, 4)
aceDLNM:::Bsplinevec2(lnew, object$data$knots_w, 4)
aceDLNM:::Bsplinevec2(15, object$data$knots_w, 4)
object$data$knots_w
object$data$knots_w[21]
aceDLNM:::Bsplinevec2(object$data$knots_w[21], object$data$knots_w, 4)
aceDLNM:::Bsplinevec2(object$data$knots_w[22], object$data$knots_w, 4)
aceDLNM:::Bsplinevec2(object$data$knots_w[23], object$data$knots_w, 4)
aceDLNM:::Bsplinevec2(object$data$knots_w[24], object$data$knots_w, 4)
aceDLNM:::Bsplinevec2(object$data$knots_w[23], object$data$knots_w, 4)
object$data$knots_w[24]
object$data$knots_w[23]
aceDLNM:::Bsplinevec2(17, object$data$knots_w, 4)
aceDLNM:::Bsplinevec2(15, object$data$knots_w, 4)
aceDLNM:::Bsplinevec2(14, object$data$knots_w, 4)
ifelse(conL, maxLreal, 0)
conL <- T
ifelse(conL, maxLreal, 0)
conL <- F
ifelse(conL, maxLreal, 0)
ifelse(conL, maxLreal, 0)+0.0
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x),
smooth = ~s(t, bs = "bs", k = 20),
dat = dat.DLNM,
pc = NULL,
kw = 20,
kE = 20,
maxL = maxL,
# maxL = 40,
conL = FALSE,
# conL = TRUE,
eta = FALSE,
verbose = TRUE)
aceDLNMcppadBFGS:::summary.aceDLNM_fit(results, plot = TRUE)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x),
smooth = ~s(t, bs = "bs", k = 20),
dat = dat.DLNM,
pc = NULL,
kw = 20,
kE = 20,
maxL = maxL,
# maxL = 40,
# conL = FALSE,
conL = TRUE,
eta = FALSE,
verbose = TRUE)
SSwCon <- mgcv::smoothCon(s(l, bs = "bs", k = kw), absorb.cons = TRUE, data = data.frame(l = seq(0, maxLreal, length.out = max(maxLreal, 500))))[[1]]
SSwConL <- mgcv::smoothCon(s(l, bs = "bs", k = kw), absorb.cons = TRUE, data = data.frame(l = rep(maxLreal, max(maxLreal, 500))))[[1]]
dim(SSw$X)
SSwXL <- mgcv::PredictMat(SSwCon, data = data.frame(l = rep(maxLreal, max(maxLreal, 500))))
SSwXL
dim(SSwXL)
SSwXL <- mgcv::PredictMat(SSw, data = data.frame(l = rep(maxLreal, max(maxLreal, 500))))
QRw <- qr(t(SSw$X - SSwXL) %*% as.vector(rep(1,nrow(SSw$X))))
Qw <- qr.Q(QRw, complete = TRUE)
Zw <- Qw[,2:ncol(Qw)]
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x),
smooth = ~s(t, bs = "bs", k = 20),
dat = dat.DLNM,
pc = NULL,
kw = 20,
kE = 20,
maxL = maxL,
# maxL = 40,
conL = FALSE,
# conL = TRUE,
eta = FALSE,
verbose = TRUE)
aceDLNMcppadBFGS:::summary.aceDLNM_fit(results, plot = TRUE)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x),
smooth = ~s(t, bs = "bs", k = 20),
dat = dat.DLNM,
pc = NULL,
kw = 20,
kE = 20,
maxL = maxL,
# maxL = 40,
# conL = FALSE,
conL = TRUE,
eta = FALSE,
verbose = TRUE)
aceDLNMcppadBFGS:::summary.aceDLNM_fit(results, plot = TRUE)
Bsplinevec2ConconL(lnew, results$data$knots_w, 4, Zwnew, object$data$maxL+1)
aceDLNMcppadBFGS:::Bsplinevec2ConconL(1, results$data$knots_w, 4, Zwnew, results$data$maxL+1)
results$data$maxL+1
aceDLNMcppadBFGS:::Bsplinevec2ConconL(15, results$data$knots_w, 4, Zwnew, results$data$maxL+1)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x),
smooth = ~s(t, bs = "bs", k = 20),
dat = dat.DLNM,
pc = NULL,
kw = 20,
kE = 20,
maxL = maxL,
# maxL = 40,
# conL = FALSE,
conL = TRUE,
eta = FALSE,
verbose = TRUE)
aceDLNMcppadBFGS:::summary.aceDLNM_fit(results, plot = TRUE)
kw <- 20
maxL <- 14
library(mgcv)
## constraint: Ax + b = 0
## unconstrained parameter: y = N y + A^{-} (-b) = K * y + a
## where A^{-} is the pseduo-inv of A, N is null space of A such that AN = 0
A <- rbind(mgcv::PredictMat(SSw, data = data.frame(l = maxLreal)) %*% Zwnew,
BsplinevecCon1st(maxLreal, knots_w, 4, Zwnew))
## smooths from mgcv
SSw <- mgcv::smoothCon(s(l, bs = "bs", k = kw), absorb.cons = FALSE, data = data.frame(l = seq(0, maxLreal, length.out = max(maxLreal, 500))))[[1]]
knots_w <- SSw$knots
SSwCon <- mgcv::smoothCon(s(l, bs = "bs", k = kw), absorb.cons = TRUE, data = data.frame(l = seq(0, maxLreal, length.out = max(maxLreal, 500))))[[1]]
QRw <- qr(t(SSw$X) %*% as.vector(rep(1,nrow(SSw$X))))
Qw <- qr.Q(QRw, complete = TRUE)
Zw <- Qw[,2:ncol(Qw)]
## smooths from mgcv
SSw <- mgcv::smoothCon(s(l, bs = "bs", k = kw), absorb.cons = FALSE, data = data.frame(l = seq(0, maxLreal, length.out = max(maxLreal, 500))))[[1]]
maxLreal <- 15
## smooths from mgcv
SSw <- mgcv::smoothCon(s(l, bs = "bs", k = kw), absorb.cons = FALSE, data = data.frame(l = seq(0, maxLreal, length.out = max(maxLreal, 500))))[[1]]
knots_w <- SSw$knots
SSwCon <- mgcv::smoothCon(s(l, bs = "bs", k = kw), absorb.cons = TRUE, data = data.frame(l = seq(0, maxLreal, length.out = max(maxLreal, 500))))[[1]]
QRw <- qr(t(SSw$X) %*% as.vector(rep(1,nrow(SSw$X))))
Qw <- qr.Q(QRw, complete = TRUE)
Zw <- Qw[,2:ncol(Qw)]
# max(abs(SSw$X %*% Zw - SSwCon$X))
# max(abs(t(Zw) %*% SSw$S[[1]] %*% Zw - SSwCon$S[[1]]))
SwCon <- SSwCon$S[[1]]
## absorb SwCon
EEw <- eigen(SwCon)
pw <- ncol(EEw$vectors)
rw <- sum(EEw$values > .Machine$double.eps)
mw <- pw - rw
URw <- EEw$vectors[,1:rw]
Dpw <- as.matrix(Matrix::Diagonal(rw,1 / sqrt(Reduce(c,lapply(EEw$values,function(x) x[x>.Machine$double.eps])))))
if(mw == 0) {
Uwpen <- as.matrix(URw %*% Dpw)
} else {
UFw <- EEw$vectors[,rw + (1:mw)]
if (!is.matrix(UFw)) UFf <- cbind(UFw) # ensure UFw in a matrix
Uwpen <- as.matrix(cbind(URw %*% Dpw, UFw))
}
SwI <- diag(1, nrow = pw, ncol = pw) # identity matrix
if(mw > 0) SwI[rw + (1:mw), rw + (1:mw)] <- 0 # new penalty matrix
Zwnew <- Zw %*% Uwpen
## constraint: Ax + b = 0
## unconstrained parameter: y = N y + A^{-} (-b) = K * y + a
## where A^{-} is the pseduo-inv of A, N is null space of A such that AN = 0
A <- rbind(mgcv::PredictMat(SSw, data = data.frame(l = maxLreal)) %*% Zwnew,
BsplinevecCon1st(maxLreal, knots_w, 4, Zwnew))
BsplinevecCon1st <- aceDLNMcppadBFGS:::BsplinevecCon1st
## constraint: Ax + b = 0
## unconstrained parameter: y = N y + A^{-} (-b) = K * y + a
## where A^{-} is the pseduo-inv of A, N is null space of A such that AN = 0
A <- rbind(mgcv::PredictMat(SSw, data = data.frame(l = maxLreal)) %*% Zwnew,
BsplinevecCon1st(maxLreal, knots_w, 4, Zwnew))
b <- matrix(c(-1,0), nrow = 2)
QRA <- qr(t(A))
QA <- qr.Q(QRA, complete = TRUE)
K <- QA[,-seq_len(QRA$rank)]
a <- as.vector(MASS::ginv(A) %*% b)
dim(K)
## constraint: Ax + b = 0
## unconstrained parameter: y = N y + A^{-} (-b) = K * y + a
## where A^{-} is the pseduo-inv of A, N is null space of A such that AN = 0
A <- rbind(mgcv::PredictMat(SSw, data = data.frame(l = maxLreal)) %*% Zwnew)
A <- rbind(mgcv::PredictMat(SSw, data = data.frame(l = maxLreal)) %*% Zwnew)
A <- rbind(mgcv::PredictMat(SSw, data = data.frame(l = maxLreal)) %*% Zwnew)
b <- matrix(c(-1), nrow = 1)
QRA <- qr(t(A))
QA <- qr.Q(QRA, complete = TRUE)
seq_len(QRA$rank)
K <- QA[,-seq_len(QRA$rank)]
a <- as.vector(MASS::ginv(A) %*% b)
K
a
###
library(aceDLNMcppadBFGS)
library(mgcv)
gt <- function(x) sin(x/150)
curve(gt, 1, 6573)
# gt <- function(x) 0.2*sin(x/150)
maxL <- 14
theta <- 8
Nt <- 1000
wltype <- "type1"
# wltype <- "type2"
fEtype <- "quadratic"
set.seed(as.numeric(2))
ttmp <- 1:(2*maxL+Nt+100)
ttmp <- ttmp[-(1:maxL)]
meangt <- mean(gt(ttmp))
otherterm <- data.frame(trend = gt(ttmp) - meangt,
intercept = 0)
dat.gen.DLNM <- GenerateData(fEtype = fEtype, wltype = wltype,
Nt = Nt+100+maxL,
theta = theta,
maxL = maxL,
other = otherterm,
interpolate = TRUE)
x <- dat.gen.DLNM$x # PM2.5
t <- dat.gen.DLNM$t # time
## all data
dat.DLNM.all <- data.frame(x = dat.gen.DLNM$x,
t = dat.gen.DLNM$t,
y = dat.gen.DLNM$y)
## data for test
dat.DLNM.test <- dat.DLNM.all[-c(1:(Nt+maxL)), ]
dat.DLNM.test <- subset(dat.DLNM.test, select = -c(y)) # delete outcome variable for testing
## data for train
dat.DLNM <- dat.DLNM.all[1:(Nt+maxL),]
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x),
smooth = ~s(t, bs = "bs", k = 20),
dat = dat.DLNM,
pc = NULL,
kw = 10,
kE = 20,
# maxL = maxL,
maxL = 15,
# conL = FALSE,
conL = TRUE,
eta = FALSE,
verbose = TRUE)
true.function <- dat.gen.DLNM$true.f
true.function$smooth <- function(x,var){
if(var == "t") gt(x) - meangt
}
summary(results, plot = TRUE, true.function = true.function)
dim(K)
length(a)
A <- rbind(mgcv::PredictMat(SSw, data = data.frame(l = maxLreal)) %*% Zwnew,
BsplinevecCon1st(maxLreal, knots_w, 4, Zwnew))
b <- matrix(c(-1,0), nrow = 2)
length(b)
A <- rbind(mgcv::PredictMat(SSw, data = data.frame(l = maxLreal)) %*% Zwnew,
BsplinevecCon1st(maxLreal, knots_w, 4, Zwnew))
b <- matrix(c(-1,0), nrow = 2)
a
QRA <- qr(t(A))
QA <- qr.Q(QRA, complete = TRUE)
K <- QA[,-seq_len(QRA$rank)]
a <- as.vector(MASS::ginv(A) %*% b)
a
dim(K)
ncol(K)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x),
smooth = ~s(t, bs = "bs", k = 20),
dat = dat.DLNM,
pc = NULL,
kw = 10,
kE = 20,
# maxL = maxL,
maxL = 15,
# conL = FALSE,
conL = TRUE,
eta = FALSE,
verbose = TRUE)
true.function <- dat.gen.DLNM$true.f
true.function$smooth <- function(x,var){
if(var == "t") gt(x) - meangt
}
summary(results, plot = TRUE, true.function = true.function)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x),
smooth = ~s(t, bs = "bs", k = 20),
dat = dat.DLNM,
pc = NULL,
kw = 10,
kE = 20,
# maxL = maxL,
maxL = 15,
# conL = FALSE,
conL = TRUE,
conLorder = 2,
eta = FALSE,
verbose = TRUE)
summary(results, plot = TRUE, true.function = true.function)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x),
smooth = ~s(t, bs = "bs", k = 20),
dat = dat.DLNM,
pc = NULL,
kw = 10,
kE = 20,
# maxL = maxL,
maxL = 7,
# conL = FALSE,
conL = TRUE,
conLorder = 2,
eta = FALSE,
verbose = TRUE)
summary(results, plot = TRUE, true.function = true.function)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x),
smooth = ~s(t, bs = "bs", k = 20),
dat = dat.DLNM,
pc = NULL,
kw = 10,
kE = 20,
# maxL = maxL,
maxL = 7,
conL = FALSE,
# conL = TRUE,
# conLorder = 2,
eta = FALSE,
verbose = TRUE)
summary(results, plot = TRUE, true.function = true.function)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x),
smooth = ~s(t, bs = "bs", k = 20),
dat = dat.DLNM,
pc = NULL,
kw = 30,
kE = 20,
# maxL = maxL,
maxL = 40,
# conL = FALSE,
conL = TRUE,
conLorder = 2,
eta = FALSE,
verbose = TRUE)
summary(results, plot = TRUE, true.function = true.function)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x),
smooth = ~s(t, bs = "bs", k = 20),
dat = dat.DLNM,
pc = NULL,
kw = 30,
kE = 20,
# maxL = maxL,
maxL = 40,
conL = FALSE,
# conL = TRUE,
# conLorder = 2,
eta = FALSE,
verbose = TRUE)
summary(results, plot = TRUE, true.function = true.function)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x),
smooth = ~s(t, bs = "bs", k = 20),
dat = dat.DLNM,
pc = NULL,
kw = 30,
kE = 20,
# maxL = maxL,
maxL = 40,
# conL = FALSE,
conL = TRUE,
conLorder = 0,
eta = FALSE,
verbose = TRUE)
summary(results, plot = TRUE, true.function = true.function)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x),
smooth = ~s(t, bs = "bs", k = 20),
dat = dat.DLNM,
pc = NULL,
kw = 30,
kE = 20,
# maxL = maxL,
maxL = 40,
# conL = FALSE,
conL = TRUE,
conLorder = 1,
eta = FALSE,
verbose = TRUE)
summary(results, plot = TRUE, true.function = true.function)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x),
smooth = ~s(t, bs = "bs", k = 20),
dat = dat.DLNM,
pc = NULL,
kw = 20,
kE = 20,
# maxL = maxL,
maxL = 30,
# conL = FALSE,
conL = TRUE,
conLorder = 1,
eta = FALSE,
verbose = TRUE)
summary(results, plot = TRUE, true.function = true.function)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x),
smooth = ~s(t, bs = "bs", k = 20),
dat = dat.DLNM,
pc = NULL,
kw = 20,
kE = 20,
# maxL = maxL,
maxL = 30,
# conL = FALSE,
conL = TRUE,
conLorder = 2,
eta = FALSE,
verbose = TRUE)
summary(results, plot = TRUE, true.function = true.function)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x),
smooth = ~s(t, bs = "bs", k = 20),
dat = dat.DLNM,
pc = NULL,
kw = 20,
kE = 20,
# maxL = maxL,
maxL = 35,
# conL = FALSE,
conL = TRUE,
conLorder = 2,
eta = FALSE,
verbose = TRUE)
summary(results, plot = TRUE, true.function = true.function)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x),
smooth = ~s(t, bs = "bs", k = 20),
dat = dat.DLNM,
pc = NULL,
kw = 30,
kE = 20,
# maxL = maxL,
maxL = 35,
# conL = FALSE,
conL = TRUE,
conLorder = 2,
eta = FALSE,
verbose = TRUE)
summary(results, plot = TRUE, true.function = true.function)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x),
smooth = ~s(t, bs = "bs", k = 20),
dat = dat.DLNM,
pc = NULL,
kw = 10,
kE = 20,
# maxL = maxL,
maxL = 7,
# conL = FALSE,
conL = TRUE,
conLorder = 2,
eta = FALSE,
verbose = TRUE)
summary(results, plot = TRUE, true.function = true.function)
