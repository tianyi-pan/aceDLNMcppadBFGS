dat <- data.frame(x = c(dat.gen1$x, dat.gen2$x),
t = c(dat.gen1$t, dat.gen2$t),
y = c(dat.gen1$y, 2*dat.gen2$y),
id = as.factor(c(rep("a", 1014), rep("b", 1014))),
logpop = log(c(rep(1000, 1014), rep(2000, 1014))))
results <- aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
load("test.RData")
## START example for random effect
library(aceDLNMcppadBFGS)
library(mgcv)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
load("test.RData")
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
library(mgcv)
library(aceDLNMcppadBFGS)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
par.start = c(4,4,8,4,8),
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
par.start = c(4,4,8,4,8),
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
# par.start = c(4,4,8,4,8),
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
# par.start = c(4,4,8,4,8),
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
dat$y[15]
dat$y[14]
dat$y[1:100]
View(dat)
lgamma(3)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
# par.start = c(4,4,8,4,8),
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
# par.start = c(4,4,8,4,8),
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
lgamma(3)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
# par.start = c(4,4,8,4,8),
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
# par.start = c(4,4,8,4,8),
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
par.start = c(4,4,4,4,4),
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
par.start = c(4,4,4,4,4),
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
results <- aceDLNM::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
dat = dat,
par.start = c(4,4,4,4,4),
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
par.start = c(4,4,4,4,4),
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
par.start = c(4,4,4,4,4),
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
results$opt
true.function <- dat.gen1$true.f
true.function$smooth <- function(x,var){
if(var == "t") gt(x) - meangt
}
summary(results, plot = TRUE, true.function = true.function)
## START example for random effect
library(aceDLNMcppadBFGS)
library(mgcv)
maxL <- 14
theta <- 8
Nt <- 1000
gt <- function(x) sin(x/150)
ttmp <- 1:1014
ttmp <- ttmp[-(1:maxL)]
meangt <- mean(gt(ttmp))
otherterm1 <- data.frame(trend = gt(ttmp) - meangt,
intercept = 0)
otherterm2 <- data.frame(trend = gt(ttmp) - meangt,
intercept = 1)
dat.gen1 <- GenerateData(fEtype = "quadratic", wltype = "type1",
Nt = Nt,
theta = theta,
maxL = maxL,
interpolate = TRUE,
other = otherterm1)
dat.gen2 <- GenerateData(fEtype = "quadratic", wltype = "type1",
Nt = Nt,
theta = theta,
maxL = maxL,
interpolate = TRUE,
other = otherterm2)
dat <- data.frame(x = c(dat.gen1$x, dat.gen2$x),
t = c(dat.gen1$t, dat.gen2$t),
y = c(dat.gen1$y, 2*dat.gen2$y),
id = as.factor(c(rep("a", 1014), rep("b", 1014))),
logpop = log(c(rep(1000, 1014), rep(2000, 1014))))
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
par.start = c(4,4,4,4,4),
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
maxL <- 14
theta <- 8
Nt <- 2000
gt <- function(x) sin(x/150)
ttmp <- 1:1014
ttmp <- ttmp[-(1:maxL)]
meangt <- mean(gt(ttmp))
otherterm1 <- data.frame(trend = gt(ttmp) - meangt,
intercept = 0)
otherterm2 <- data.frame(trend = gt(ttmp) - meangt,
intercept = 1)
dat.gen1 <- GenerateData(fEtype = "quadratic", wltype = "type1",
Nt = Nt,
theta = theta,
maxL = maxL,
interpolate = TRUE,
other = otherterm1)
dat.gen2 <- GenerateData(fEtype = "quadratic", wltype = "type1",
Nt = Nt,
theta = theta,
maxL = maxL,
interpolate = TRUE,
other = otherterm2)
dat <- data.frame(x = c(dat.gen1$x, dat.gen2$x),
t = c(dat.gen1$t, dat.gen2$t),
y = c(dat.gen1$y, 2*dat.gen2$y),
id = as.factor(c(rep("a", 1014), rep("b", 1014))),
logpop = log(c(rep(1000, 1014), rep(2000, 1014))))
library(mgcv)
maxL <- 14
theta <- 8
Nt <- 2000
gt <- function(x) sin(x/150)
ttmp <- 1:(Nt+14)
ttmp <- ttmp[-(1:maxL)]
meangt <- mean(gt(ttmp))
otherterm1 <- data.frame(trend = gt(ttmp) - meangt,
intercept = 0)
otherterm2 <- data.frame(trend = gt(ttmp) - meangt,
intercept = 1)
dat.gen1 <- GenerateData(fEtype = "quadratic", wltype = "type1",
Nt = Nt,
theta = theta,
maxL = maxL,
interpolate = TRUE,
other = otherterm1)
dat.gen2 <- GenerateData(fEtype = "quadratic", wltype = "type1",
Nt = Nt,
theta = theta,
maxL = maxL,
interpolate = TRUE,
other = otherterm2)
dat <- data.frame(x = c(dat.gen1$x, dat.gen2$x),
t = c(dat.gen1$t, dat.gen2$t),
y = c(dat.gen1$y, 2*dat.gen2$y),
id = as.factor(c(rep("a", Nt+14), rep("b",  Nt+14))),
logpop = log(c(rep(1000,  Nt+14), rep(2000,  Nt+14))))
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
true.function <- dat.gen1$true.f
true.function$smooth <- function(x,var){
if(var == "t") gt(x) - meangt
}
summary(results, plot = TRUE, true.function = true.function)
Nt <- 3000
dat.gen <- GenerateData(fEtype = fEtype, wltype = "type1",
Nt = Nt,
theta = theta,
maxL = maxL,
fE.set = function(x) 3*sin(x/20),
interpolate = TRUE)
dat <- data.frame(x = dat.gen$x,
t = dat.gen$t,
y = dat.gen$y)
mean(dat$y)
gt <- function(x) sin(x/150)
curve(gt, 1, 6573)
# gt <- function(x) 0.2*sin(x/150)
maxL <- 14
theta <- 8
Nt <- 3000
wltype <- "type1"
fEtype <- "quadratic"
set.seed(as.numeric(2))
ttmp <- 1:(2*maxL+Nt+100)
ttmp <- ttmp[-(1:maxL)]
meangt <- mean(gt(ttmp))
otherterm <- data.frame(trend = gt(ttmp) - meangt,
intercept = 0)
dat.gen.DLNM <- GenerateData(fEtype = fEtype, wltype = wltype,
Nt = Nt+100+maxL,
theta = theta,
maxL = maxL,
other = otherterm,
interpolate = TRUE)
x <- dat.gen.DLNM$x # PM2.5
t <- dat.gen.DLNM$t # time
## all data
dat.DLNM.all <- data.frame(x = dat.gen.DLNM$x,
t = dat.gen.DLNM$t,
y = dat.gen.DLNM$y)
## data for test
dat.DLNM.test <- dat.DLNM.all[-c(1:(Nt+maxL)), ]
dat.DLNM.test <- subset(dat.DLNM.test, select = -c(y)) # delete outcome variable for testing
## data for train
dat.DLNM <- dat.DLNM.all[1:(Nt+maxL),]
results <- aceDLNMcppadBFGS::aceDLNM(formula = y~sX(t, x),
smooth = ~s(t, bs = "bs", k = 20),
dat = dat.DLNM,
pc = NULL,
kw = 20,
kE = 20,
maxL = maxL,
eta = FALSE,
verbose = TRUE)
true.function <- dat.gen.DLNM$true.f
true.function$smooth <- function(x,var){
if(var == "t") gt(x) - meangt
}
summary(results, plot = TRUE, true.function = true.function)
summary(results, plot = TRUE, true.function = true.function)
95873.71/60
95873.71/(60*60)
f1 <- function(x) 1-exp(-x)
f2 <- function(x) x
curve(f1, from = 0, to = 1)
curve(f2, from = 0, to = 1, add = TRUE)
curve(f2, from = 0, to = 1, add = TRUE, col = "red")
curve(f1, from = -1, to = 1)
curve(f2, from = -1, to = 1, add = TRUE, col = "red")
curve(f1, from = -0.01, to = 0.01)
curve(f2, from = -0.01, to = 0.01, add = TRUE, col = "red")
curve(f1, from = -0.1, to = 0.1)
curve(f2, from = -0.1, to = 0.1, add = TRUE, col = "red")
legend("topright", legend = c("1 - exp(-x)", "x"),
col = c("blue", "red"), lwd = 2)
legend("bottomright", legend = c("1 - exp(-x)", "x"),
col = c("blue", "red"), lwd = 2)
curve(f1, from = 0, to = 0.1, col = "blue")
curve(f1, from = 0, to = 0.1, col = "blue", lwd = 2)
curve(f2, from = 0, to = 0.1, add = TRUE, col = "red", lwd = 2)
legend("bottomright", legend = c("1 - exp(-x)", "x"),
col = c("blue", "red"), lwd = 2)
xlab("f")
curve(f1, from = 0, to = 0.1, col = "blue", lwd = 2, xlab = "x", ylab = "AR")
curve(f2, from = 0, to = 0.1, add = TRUE, col = "red", lwd = 2)
legend("bottomright", legend = c("1 - exp(-x)", "x"),
col = c("blue", "red"), lwd = 2)
## START example for random effect
library(aceDLNMcppadBFGS)
library(mgcv)
maxL <- 14
theta <- 8
Nt <- 2000
gt <- function(x) sin(x/150)
ttmp <- 1:(Nt+14)
ttmp <- ttmp[-(1:maxL)]
meangt <- mean(gt(ttmp))
otherterm1 <- data.frame(trend = gt(ttmp) - meangt,
intercept = 0)
otherterm2 <- data.frame(trend = gt(ttmp) - meangt,
intercept = 1)
dat.gen1 <- GenerateData(fEtype = "quadratic", wltype = "type1",
Nt = Nt,
theta = theta,
maxL = maxL,
interpolate = TRUE,
other = otherterm1)
dat.gen2 <- GenerateData(fEtype = "quadratic", wltype = "type1",
Nt = Nt,
theta = theta,
maxL = maxL,
interpolate = TRUE,
other = otherterm2)
dat <- data.frame(x = c(dat.gen1$x, dat.gen2$x),
t = c(dat.gen1$t, dat.gen2$t),
y = c(dat.gen1$y, 2*dat.gen2$y),
id = as.factor(c(rep("a", Nt+14), rep("b",  Nt+14))),
logpop = log(c(rep(1000,  Nt+14), rep(2000,  Nt+14))))
results <- aceDLNM::aceDLNM(formula = y~sX(t, x, by = id),
smooth = ~ s(t, bs = "bs") + s(id, bs = "re"),
offset = ~ logpop,
dat = dat,
kw = 20,
kE = 20,
maxL = maxL,
verbose = TRUE)
true.function <- dat.gen1$true.f
true.function$smooth <- function(x,var){
if(var == "t") gt(x) - meangt
}
summary(results, plot = TRUE, true.function = true.function)
residuals(results, plot = TRUE)
#'   \code{ggplot2::stat_smooth(method = "gam")}.
#' @param ...
#'
#' @import dplyr
#' @import ggplot2
#' @return a list containing the randomized quantile residuals and the plots.
#' @references Dunn, Peter K., and Gordon K. Smyth. \dQuote{Randomized quantile
#'   residuals}. Journal of Computational and graphical statistics 5.3 (1996):
#'   236-244.
#' @export
residuals.aceDLNM_fit <- function(object, seed = 123, plot = FALSE,
nsample = 1e4, curve = FALSE, ...){
set.seed(seed)
eta <- object$eta$est + object$data$offset$Xoffset
y <- object$modeldata$y
x <- object$modeldata$x
t <- object$modeldata$t
mu <- exp(eta)
theta <- exp(object$point$log_theta) # theta
if(length(y) > nsample) {
sample.id <- sample(1:length(y), nsample)
} else {
sample.id <- 1:length(y)
}
rqr <- mapply(function(yi, mui){
yilim <- max(yi-1,0)
ai <- pnbinom(yilim, size = theta, mu = mui)
bi <- pnbinom(yi, size = theta, mu = mui)
ui <- runif(1, min = ai, max = bi)
ri <- qnorm(ui)
return(ri)
},
y[sample.id], mu[sample.id])
out <- list(res = data.frame(rqr = rqr,
y = y[sample.id],
mu = mu[sample.id],
x = x[sample.id],
t = t[sample.id]),
p.qq = NULL,
p.res = NULL
)
p.qq <- ggplot(data.frame(xx = rqr), aes(sample = xx)) + stat_qq() + stat_qq_line() + xlab("Theoretical quantiles") + ylab("Sample quantiles") + theme_bw()
out$p.qq <- p.qq
p.res <- ggplot(data.frame(t =t[sample.id], xx = rqr), aes(x = t, y = xx)) +
geom_point() + geom_hline(yintercept = 0) +
scale_x_continuous(breaks = seq(min(out$res$t), max(out$res$t), by = round((max(out$res$t) - min(out$res$t))/50))) +
xlab("Time") + ylab("Randomized Quantile Residuals") + theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
if(curve) p.res <- p.res + stat_smooth(method = "gam")
out$p.res <- p.res
if(plot) {
oask <- devAskNewPage(TRUE)
on.exit(devAskNewPage(oask))
dev.hold()
plot(p.qq)
dev.flush()
dev.hold()
plot(p.res)
dev.flush()
devAskNewPage(oask)
invisible(out)
} else {
return(out)
}
}
residuals(results, plot = TRUE)
library(ggplot2)
residuals(results, plot = TRUE)
